/*
    Flexbox model atoms

    This is the engine-room for a lot of what blip is about - the flexbox layout model.
    This class contains a set of modular classes that are designed to live on their to handle the majority of layout.
*/

/* 
    Handle flex grow and shrink extents 
*/
@mixin f-grow($amount) {
    flex-grow: $amount;
}
@mixin f-shrink($amount) {
    flex-shrink: $amount;
}

@mixin f-grow-shrink-proc($min: 0, $max: 5) {
    @for $i from 0 through 5 {
        .f-grow-#{$i} {
            @include f-grow($i);
        }

        .f-shrink-#{$i} {
            @include f-shrink($i);
        }
    }
}

@include f-grow-shrink-proc();

/* 
    Flex alignment and justification 
*/
$f-standard: (
    start: flex-start, 
    center: center, 
    end: flex-end
);
$f-ai: (
    stretch
);
$f-j: (
    space-around, space-between
);

@mixin f-ai($type) {
    align-items: $type;
}
@mixin f-as($type) {
    align-self: $type;
}
@mixin f-j($type) {
    justify-content: $type;
}
@mixin f-ac($type) {
    align-content: $type;
}

@mixin f-ai-as-j-proc() {
    @each $l, $v in $f-standard {
        .f-ai-#{$l} {
            @include f-ai($v);
        }
        .f-as-#{$l} {
            @include f-as($v);
        }
        .f-j-#{$l} {
            @include f-j($v);
        }
        .f-ac-#{$l} {
            @include f-ac($v);
        }
    }

    @each $v in $f-ai {
        .f-ai-#{$v} {
            @include f-ai($v);
        }
        .f-ac-#{$v} {
            @include f-ac($v);
        }
    }
    @each $v in $f-j {
        .f-j-#{$v} {
            @include f-j($v);
        }
        .f-ac-#{$v} {
            @include f-ac($v);
        }
    }
}

@include f-ai-as-j-proc();

/* 
    Flex wrapping 
*/
$f-w: (
    wrap, nowrap, wrap-reverse
);

@mixin f-w($type) {
    flex-wrap: $type;
}

@mixin f-w-proc($types) {
    @each $v in $f-w {
        .f-w-#{$v} {
            @include f-w($v);
        }
    }
}

@include f-w-proc($f-w);

/* 
    Direction 
*/
$f-d: (
    row, column
);

@mixin f-d($type) {
    flex-direction: $type;
}

@mixin f-d-proc() {
    @each $v in $f-d {
        .f-d-#{$v} {
            @include f-d($v);
        }
    }
}

@include f-d-proc();

/*
    Makes an element flexible and fills a container.
*/
@mixin f() {
    display: flex;
    flex: 1 1 auto;
}

.f {
    @include f();
}

/*
    Handle row and column directions.
*/
.f-column {
    @include f();
    @include f-d(column);
}
.f-row {
    @include f();
    @include f-d(row);
}

/*
    Makes an element flexible but sizes to its own content.
*/
@mixin f-none() {
    display: flex;
    flex: none;
}

.f-none {
    @include f-none();
}

/*
    Handle row and column directions.
*/
.f-none-column {
    @include f-none();
    @include f-d(column);
}
.f-none-row {
    @include f-none();
    @include f-d(row);
}

/*
    Handle some special fill cases in rows and columns.
    1) Placing in a column, fill width.
    2) Placing in a row, fill height.
*/
.f-none-fill-horizonal {
    @include f-none();
    @include w(100%);
}
.f-none-fill-vertical {
    @include f-none();
    @include h(100%);
}