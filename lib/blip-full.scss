@import "blip-mixins";
@import "blip-core";

/*
    -------------------------------------
            Essential/core mixins
    -------------------------------------
*/

/*
    Sizing.
    These are absolutely essential to the flexible, responsive layout system in Blip.
    This size map can be pruned to requirements, as sizing classes do end up taking a lot of space.
*/
$s-auto:        auto;
$s-0:           0;
$s-1:           1px;
$s-2:           2px;
$s-quarterrem:  0.25rem;
$s-halfrem:     0.5rem;
$s-1rem:        1rem;
$s-2rem:        2rem;
$s-3rem:        3rem;
$s-4rem:        4rem;
$s-5rem:        5rem;
$s-6rem:        6rem;
$s-7rem:        7rem;
$s-8rem:        8rem;
$s-9rem:        9rem;
$s-10rem:       10rem;

@include sizing-proc((
    auto: $s-auto,
    0: $s-0, 
    1: $s-1, 
    2: $s-2, 
    quarterrem: $s-quarterrem, 
    halfrem: $s-halfrem, 
    1rem: $s-1rem, 
    2rem: $s-2rem, 
    3rem: $s-3rem, 
    4rem: $s-4rem, 
    5rem: $s-5rem, 
    6rem: $s-6rem,
    7rem: $s-7rem,
    8rem: $s-8rem,
    9rem: $s-9rem,
    10rem: $s-10rem
));

$s-90:          90%;
$s-80:          80%;
$s-70:          70%;
$s-60:          60%;
$s-50:          50%;
$s-40:          40%;
$s-33:          33.3333333333%;
$s-30:          30%;
$s-25:          25%;
$s-20:          20%;
$s-15:          15%;
$s-10:          10%;
$s-100:         100%;

@include percentage-proc((
    100: $s-100,
    90: $s-90, 
    80: $s-80, 
    70: $s-70, 
    60: $s-60, 
    50: $s-50, 
    40: $s-40, 
    33: $s-33, 
    30: $s-30, 
    20: $s-20, 
    15: $s-15, 
    10: $s-10
));

/*
    Fonts and Typography.
    Another core part of the system that initializes the relative sizes of fonts and headers.
*/

// Resets and defaults.
$base-font-size:                8px;
$base-font-size-responsive:     16px;

html {
    @extend .sans-serif;
    font-size: $base-font-size;
}

/* 
    Set the font size again as we want it to be slightly smaller than the base font size. 
*/
body {    
    @extend .fs-6;
}

// Responsive media query for mobile devices.
@media only screen and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 2) {
    html {
        font-size: $base-font-size-responsive !important;
    }
}

$font-factor:           1.75rem;

$fs-1:                  5 * $font-factor;
$fs-2:                  4 * $font-factor;
$fs-3:                  3 * $font-factor;
$fs-4:                  2 * $font-factor;
$fs-5:                  1 * $font-factor;
$fs-6:                  $font-factor;
$fs-7:                  1.5rem;

@include font-size-proc((
    1: $fs-1, 
    2: $fs-2, 
    3: $fs-3, 
    4: $fs-4,
    5: $fs-5, 
    6: $fs-6, 
    7: $fs-7
));

/* 
    Setup font sizes and other specific typographic properties 
*/
h1 {    
    @include fs($fs-1);
}
h2 {
    @include fs($fs-2);
}
h3 {
    @include fs($fs-3);
}
h4 {
    @include fs($fs-4);
}
h5 {
    @include fs($fs-5);
}

// Font weight procs. The default here is 5 (ie: fw-100, fw-200, etc.)
@include fw-proc(5);

// Line-heights.
@include line-height-proc((
    solid: 1, 
    title: 1.3, 
    copy: 1.6
));

/*
    Opacity.
    By default, the system caters for 10 variations (ie: .1) of opacity.
*/
@include opacity-proc(10);

/*
    Z-index.
    By default, the system caters for 10 zindex variations.
*/
@include zindex-proc();

/*
    Borders.
    These are typically a cutdown set of sizes, as having the full set of sized borders is overkill.
 */
@include border-proc((
    0: $s-0,
    1: $s-1,
    quarterrem: $s-quarterrem,
    halfrem: $s-halfrem
));

/*
    Transitions.
    Sets up some lightweight classes to handle transition sizes.
*/
@include transition-procs((
    s: 0.25s,
    m: 0.5s,
    l: 0.75s,
    xl: 1s
));

/*
    -------------------------------
            Optional mixins
    -------------------------------
*/

/*
    Outlines.
    Similar to borders, but layout differently.
*/
@include oline-proc((
    0: $s-0,
    1: $s-1,
    quarterrem: $s-quarterrem,
    halfrem: $s-halfrem
));

@include oline-offset-proc((
    0: $s-0,
    1: $s-1,
    quarterrem: $s-quarterrem,
    halfrem: $s-halfrem,
    1rem: $s-1rem,
    2rem: $s-2rem
));

/*
    Flexbox Grid.
    Set up a basic 8-column grid with a default gutter.
    Note that this will probably become irrelevant the more CSS Grid support picks up.
*/
@include grid-proc(8, $s-halfrem);

/*
    Box shadows.
    Simple box shadow classes with default values.
*/
@include bshad-proc((
    halfrem: $s-halfrem
));